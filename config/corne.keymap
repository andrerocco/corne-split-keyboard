#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        COMBO_ALT {
            bindings = <&kp LEFT_ALT>;
            key-positions = <37 36>;
            layers = <0>;
        };

        COMBO_SUPER {
            bindings = <&kp LEFT_GUI>;
            key-positions = <12 24>;
        };

        COMBO_ESC {
            bindings = <&kp ESCAPE>;
            key-positions = <0 12>;
        };

        COMBO_UNDERSCORE {
            bindings = <&kp UNDERSCORE>;
            key-positions = <16 4>;
        };

        COMBO_MINUS {
            bindings = <&kp MINUS>;
            key-positions = <16 15>;
        };

        COMBO_PLUS {
            bindings = <&kp TILDE>;
            key-positions = <7 19>;
        };

        COMBO_EQUALS {
            bindings = <&kp EQUAL>;
            key-positions = <19 20>;
        };

        COMBO_EXCLAMATION {
            bindings = <&kp EXCLAMATION>;
            key-positions = <13 25>;
        };

        COMBO_AT {
            bindings = <&kp AT_SIGN>;
            key-positions = <14 26>;
        };

        COMBO_HASHTAG {
            bindings = <&kp HASH>;
            key-positions = <15 27>;
        };

        COMBO_DOLLARSIGN {
            bindings = <&kp DOLLAR>;
            key-positions = <16 28>;
        };

        COMBO_PERCENT {
            bindings = <&kp PERCENT>;
            key-positions = <17 29>;
        };

        COMBO_COPY {
            bindings = <&kp LC(C)>;
            key-positions = <27 28>;
        };

        COMBO_CUT {
            bindings = <&kp LC(X)>;
            key-positions = <26 27>;
        };

        COMBO_PASTE {
            bindings = <&kp LC(V)>;
            key-positions = <26 28>;
        };

        COMBO_PRINTSCREEN {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <26 27 28>;
        };
    };

    behaviors {
        swap: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "Swapper (Alt+Tab)";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;

            ignored-key-positions = <24 37>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "Shift+Delete or Backspace";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        tilded_a: MACRO_A_TILDE {
            compatible = "zmk,behavior-macro";
            label = "Types A with tilde";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp A>;
        };

        tilded_o: tilded_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp O>;
            label = "TILDED_O";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
&kp TAB        &kp Q      &kp W  &kp E  &kp R      &kp T        &kp Y           &kp U  &kp I      &kp O      &kp P           &kp GRAVE
&kp BACKSPACE  &kp A      &kp S  &kp D  &kp F      &kp G        &kp H           &kp J  &kp K      &kp L      &kp APOSTROPHE  &kp SEMICOLON
&trans         &kp CARET  &kp Z  &kp X  &kp C      &kp V        &kp B           &kp N  &kp M      &kp COMMA  &kp DOT         &kp SLASH
                                 &mo 1  &kp LCTRL  &kp SPACE    &kp LEFT_SHIFT  &mo 2  &kp ENTER
            >;
        };

        LOWER {
            bindings = <
&swap          &kp N1          &kp N2         &kp N3     &kp N4     &kp N5      &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans             &kp TILDE
&kp BACKSPACE  &kp N6          &kp N7         &kp N8     &kp N9     &kp N0      &trans         &trans        &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp DOUBLE_QUOTES  &kp COLON
&trans         &kp UNDERSCORE  &kp BACKSLASH  &kp MINUS  &kp EQUAL  &kp PLUS    &trans         &kp LBKT      &kp RBKT              &kp LESS_THAN          &kp GREATER_THAN   &kp QUESTION
                                              &trans     &trans     &trans      &trans         &mo 3         &trans
            >;
        };

        RAISE {
            bindings = <
&kp ESCAPE      &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp AMPERSAND      &kp ASTERISK  &kp UP_ARROW      &kp C_PREV  &kp C_NEXT         &kp TILDE
&kp BACKSPACE   &tilded_a        &trans       &trans    &trans      &kp DELETE     &kp C_VOLUME_UP    &kp LEFT      &kp DOWN          &kp RIGHT   &kp DOUBLE_QUOTES  &kp COLON
&kp LEFT_SHIFT  &trans           &trans       &trans    &trans      &trans         &kp C_VOLUME_DOWN  &kp C_MUTE    &kp C_PLAY_PAUSE  &trans      &trans             &kp QUESTION
                                              &mo 3     &trans      &trans         &trans             &trans        &kp LEFT_ALT
            >;
        };

        ADJUST {
            bindings = <
&kp F1  &kp F2        &kp F3        &kp F4        &kp F5        &kp F6    &kp F7     &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans    &kp PG_UP  &trans  &trans  &trans   &trans   &trans
&trans  &bt BT_CLR    &out OUT_TOG  &trans        &trans        &trans    &kp PG_DN  &trans  &trans  &trans   &trans   &trans
                                    &trans        &trans        &trans    &trans     &trans  &trans
            >;
        };
    };
};
